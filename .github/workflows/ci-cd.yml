name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      python: ${{ steps.changes.outputs.python }}
      go: ${{ steps.changes.outputs.go }}
      rust: ${{ steps.changes.outputs.rust }}
      frontend: ${{ steps.changes.outputs.frontend }}
      docker: ${{ steps.changes.outputs.docker }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            python:
              - 'backend/service/**'
            go:
              - 'backend/gateway/**/*.go'
              - 'backend/real-time/**/*.go'
            rust:
              - 'backend/gateway/**/*.rs'
              - 'backend/real-time/**/*.rs'
            frontend:
              - 'frontend/**'
            docker:
              - 'Dockerfile'
              - 'docker-compose.yml'

  lint-python:
    needs: detect-changes
    if: needs.detect-changes.outputs.python == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          version: "latest"
      
      - name: Set up Python
        run: uv python install 3.11
      
      - name: Install dependencies
        working-directory: ./backend/service
        run: |
          uv sync
          uv add --dev ruff mypy
      
      - name: Lint with Ruff
        working-directory: ./backend/service
        run: |
          uv run ruff check .
          uv run ruff format --check .
      
      - name: Type check with mypy
        working-directory: ./backend/service
        run: uv run mypy . --ignore-missing-imports

  lint-go:
    needs: detect-changes
    if: needs.detect-changes.outputs.go == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
      
      - name: Lint Gateway
        if: hashFiles('backend/gateway/go.mod') != ''
        working-directory: ./backend/gateway
        run: |
          go mod download
          go vet ./...
          go fmt ./...
          golangci-lint run
        env:
          GOLANGCI_LINT_VERSION: latest
      
      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin latest
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
      
      - name: Lint Real-time Service
        if: hashFiles('backend/real-time/go.mod') != ''
        working-directory: ./backend/real-time
        run: |
          go mod download
          go vet ./...
          go fmt ./...
          golangci-lint run

  lint-rust:
    needs: detect-changes
    if: needs.detect-changes.outputs.rust == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt
      
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Lint Gateway (Rust)
        if: hashFiles('backend/gateway/Cargo.toml') != ''
        working-directory: ./backend/gateway
        run: |
          cargo fmt -- --check
          cargo clippy -- -D warnings
          cargo audit
      
      - name: Lint Real-time Service (Rust)
        if: hashFiles('backend/real-time/Cargo.toml') != ''
        working-directory: ./backend/real-time
        run: |
          cargo fmt -- --check
          cargo clippy -- -D warnings
          cargo audit

  lint-frontend:
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      
      - name: Install dependencies
        working-directory: ./frontend
        run: pnpm install
      
      - name: Lint with ESLint
        working-directory: ./frontend
        run: pnpm eslint . --ext .js,.jsx,.ts,.tsx
      
      - name: Check formatting with Prettier
        working-directory: ./frontend
        run: pnpm prettier --check .
      
      - name: Type check
        working-directory: ./frontend
        run: pnpm tsc --noEmit

  test-services:
    needs: [lint-python, lint-go, lint-rust, lint-frontend]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install uv
        uses: astral-sh/setup-uv@v2
      
      - name: Set up Python
        run: uv python install 3.11
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      

      
      - name: Test Python Service
        working-directory: ./backend/service
        run: |
          uv sync
          uv run pytest --verbose
      
      - name: Test Rust Gateway
        if: hashFiles('backend/gateway/Cargo.toml') != ''
        working-directory: ./backend/gateway
        run: cargo test --verbose
      
      - name: Test Rust Real-time
        if: hashFiles('backend/real-time/Cargo.toml') != ''
        working-directory: ./backend/real-time
        run: cargo test --verbose
      
      - name: Test Frontend
        working-directory: ./frontend
        run: |
          pnpm install
          pnpm test -- --coverage --watchAll=false

  build-and-push:
    needs: [test-services]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security-scan:
    needs: [build-and-push]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-staging:
    needs: [build-and-push, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Deploy to staging
        run: |
          echo "ðŸš€ Deploying to staging environment"
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"

  deploy-production:
    needs: [deploy-staging]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Deploy to production
        run: |
          echo "ðŸŽ¯ Deploying to production environment"
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"